<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>sensor page</title>

    <style>
        figure {
            display: inline-block;
            width: 40%;
        }

        .disconn {
            opacity: 0%;
            background-color: blue;
        }


        .ctrl_section{
            width: 30%;
            display: grid;
            grid-template-columns: 1fr;
            grid-template-rows: 1fr 1fr 1fr 1fr;
            border: 3px solid #000;
        }

        .ctrl_wrapper{
            width:100%;
            display: grid;
            grid-template-columns: 1fr 1fr;
        }

        .ctrl_title{
            display: inline-block;
            text-align: center;
        }
        
        .ctrl_checkbox{
            opacity: 0%;
        }
        .ctrl{
            width: 30%;
            height: 50%;

            margin: auto;
            position: relative;
            cursor: pointer;
            background: #ddd;
            box-shadow: 1px 2px 3px #888;
            border-radius: 20px;
            transition: 0.2s;
        }
        .ctrl_view {
            position: absolute;
            top: 4px;
            left: 3px;
            width: 20px;
            height: 20px;
            border-radius: 20px;
            box-shadow: 1px 2px 3px #888;
            background: #fff;
            transition: 0.2s;
        }

        .ctrl_checkbox:checked+.ctrl_view{
            left: 48px;
            background-color: #349fed;
            
        }

    </style>
</head>
<body>
    <h1>sensor page</h1>
    <%= parameters.user_key %>조 로그인 성공

    <a href="/login/logout_process">로그아웃</a>
    <br>
    <a href="/">메인</a>
    <a href="/log">로그</a>

    <hr>

    <!-- 제어 버튼 view -->
    <div class="ctrl_section">
        <div class="ctrl_wrapper">
            <p class="ctrl_title">순환펌프</p>
            <div class="ctrl">
                <input type="checkbox" class='ctrl_checkbox' id="btn1">
                <label class="ctrl_view" for="btn1" onClick="ctrl_btn(0)"></label>
            </div>
        </div>

        <div class="ctrl_wrapper">
            <p class="ctrl_title">히터</p>
            <div class="ctrl">
                <input type="checkbox" class='ctrl_checkbox' id="btn2">
                <label class="ctrl_view" for="btn2" onClick="ctrl_btn(1)"></label>
            </div>
        </div>

        <div class="ctrl_wrapper">
            <p class="ctrl_title">산소발생기</p>
            <div class="ctrl">
                <input type="checkbox" class='ctrl_checkbox' id="btn3">
                <label class="ctrl_view" for="btn3" onClick="ctrl_btn(2)"></label>
            </div>
        </div>

        <div class="ctrl_wrapper">
            <p class="ctrl_title">LED 조명</p>
            <div class="ctrl">
                <input type="checkbox" class='ctrl_checkbox' id="btn4">
                <label class="ctrl_view" for="btn4" onClick="ctrl_btn(3)"></label>
            </div>
        </div>
    </div>
    
    
    
    
    

    <!-- <button class='ctrl' onClick="ctrl_btn(0)">순환펌프</button>
    <button class='ctrl' onClick="ctrl_btn(1)">히터</button>
    <button class='ctrl' onClick="ctrl_btn(2)">산소발생기</button>
    <button class='ctrl' onClick="ctrl_btn(3)">LED 조명</button> -->

    <br>
    <!-- 차트 view -->
    <figure>
      <div class="container-fluid">
          <div class="row">
            <p id="disconn_PH" class="disconn">disconnected</p>
              <div class="container-fluid" id="container_PH"></div>
          </div>
          <p id="PH_last"></p>
      </div>
    </figure>

    <figure>
        <div class="container-fluid">
            <p id="disconn_RTD" class="disconn">disconnected</p>
            <div class="row">
                
                <div class="container-fluid" id="container_RTD"></div>
            </div>
            <p id="RTD_last"></p>
        </div>
      </figure>

      <figure>
        <div class="container-fluid">
            <div class="row">
                <p id="disconn_SALT" class="disconn">disconnected</p>
                <div class="container-fluid" id="container_SALT"></div>
            </div>
            <p id="SALT_last"></p>
        </div>
      </figure>

      <figure>
        <div class="container-fluid">
            <div class="row">
                <p id="disconn_DO" class="disconn">disconnected</p>
                <div class="container-fluid" id="container_DO"></div>
            </div>
            <p id="DO_last"></p>
        </div>
      </figure>
    
    

<!-- 제어 버튼 -->
<script>
    let ctrl_name = ["pump", "heater", "o2", "led"];
    function ctrl_btn(type){
        let checkbox = document.getElementsByClassName("ctrl_checkbox")[type];

        console.log(checkbox.checked);
        
        if(checkbox.checked == false){
            // on
            socket.emit('ctrl_on', ctrl_name[type]);
        } else{
            // off
            socket.emit('ctrl_off', ctrl_name[type]);
        }
    }
</script>


<!-- socket -->
<script src="/socket.io/socket.io.js"></script>

    

<!-- 차트 -->
<script src="https://code.jquery.com/jquery-1.9.1.min.js"></script>
<script src="http://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/series-label.js"></script>
<script>
    console.log("<%=parameters.url%>");
    let url = "<%= parameters.url %>";

    const user_key = "<%= parameters.user_key %>";

    const socket = io.connect(url, {
        transports: ['websocket']
    });



    socket.emit('join', user_key);


    let chart_PH;
    let chart_RTD;
    let chart_SALT;
    let chart_DO;

    let PH_data = [];
    let RTD_data = [];
    let SALT_data = [];
    let DO_data = [];

    Highcharts.setOptions({
        global: {
            useUTC: false
        }
    });

    socket.on('sensor_before_PH', async (data) => {
        for(i=0; i<data.length; i++){
            let temp = await {y: data[i]['PH'], x: new Date(data[i].date)};
            await PH_data.unshift(temp);
        }
        console.log(PH_data);

        chart_PH = new Highcharts.Chart({
            chart: {
                renderTo: 'container_PH',
                defaultSeriesType: 'spline',
            },
            title: {
                text: 'PH'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 150,
                // maxZoom: 20 * 1000
                
            },
            yAxis: {
                minPadding: 0.2,
                maxPadding: 0.2,
                title: {
                    text: '',
                    margin: 80
                }
            },
            series: [{
                animation: true,
                name: 'PH',
                data: PH_data
            }]
        });
    });

    socket.on('sensor_before_RTD', async (data) => {
        for(i=0; i<data.length; i++){
            let temp = await {y: data[i]['RTD'], x: new Date(data[i].date)};
            await RTD_data.unshift(temp);
            
        }
        console.log(RTD_data);

        chart_RTD = new Highcharts.Chart({
            chart: {
                renderTo: 'container_RTD',
                defaultSeriesType: 'spline'
            },
            title: {
                text: 'RTD'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 150,
                // maxZoom: 20 * 1000
                
            },
            yAxis: {
                minPadding: 0.2,
                maxPadding: 0.2,
                title: {
                    text: '',
                    margin: 80
                }
            },
            series: [{
                animation: true,
                name: 'RTD',
                data: RTD_data
            }]
        });
    });

    socket.on('sensor_before_SALT', async (data) => {
        for(i=0; i<data.length; i++){
            let temp = await {y: data[i]['SALT'], x: new Date(data[i].date)};
            await SALT_data.unshift(temp);
        }

        chart_SALT = new Highcharts.Chart({
            chart: {
                renderTo: 'container_SALT',
                defaultSeriesType: 'spline',
                events: {
                    load: {
                    }
                }
            },
            title: {
                text: 'SALT'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 150,
                // maxZoom: 20 * 1000
                
            },
            yAxis: {
                minPadding: 0.2,
                maxPadding: 0.2,
                title: {
                    text: '',
                    margin: 80
                }
            },
            series: [{
                animation: true,
                name: 'SALT',
                data: SALT_data
            }]
        });
    });

    socket.on('sensor_before_DO', async (data) => {
        for(i=0; i<data.length; i++){
            let temp = await {y: data[i]['DO'], x: new Date(data[i].date)};
            await DO_data.unshift(temp);
        }

        chart_DO = new Highcharts.Chart({
            chart: {
                renderTo: 'container_DO',
                defaultSeriesType: 'spline',
                events: {
                    load: {
                    }
                }
            },
            title: {
                text: 'DO'
            },
            xAxis: {
                type: 'datetime',
                tickPixelInterval: 150,
                // maxZoom: 20 * 1000
                
            },
            yAxis: {
                minPadding: 0.2,
                maxPadding: 0.2,
                title: {
                    text: '',
                    margin: 80
                }
            },
            series: [{
                animation: true,
                name: 'DO',
                data: DO_data
            }]
        });
    })
</script>





<script>
    socket.on('sensor_update', (data) => {
        document.getElementById("PH_last").innerText = data["PH"];
        document.getElementById("RTD_last").innerText = data["RTD"];
        document.getElementById("SALT_last").innerText = data["SALT"];
        document.getElementById("DO_last").innerText = data["DO"];

        const date = new Date();

        let shift_PH = (chart_PH.series[0].data.length > 20);
        let shift_RTD = (chart_RTD.series[0].data.length > 20);
        let shift_SALT = (chart_SALT.series[0].data.length > 20);
        let shift_DO = (chart_DO.series[0].data.length > 20);


        if(data["PH"] === null){
            document.getElementById("disconn_PH").style.opacity = "100%";
        } else {
            document.getElementById("disconn_PH").style.opacity = "0%";
            chart_PH.series[0].addPoint({
                x: date,
                y: data["PH"],
                color:"#000",
            }, true, shift_PH);
        }

        

        if(data["RTD"] === null){
            document.getElementById("disconn_RTD").style.opacity = "100%";
        } else {
            document.getElementById("disconn_RTD").style.opacity = "0%";
            chart_RTD.series[0].addPoint({
                x: date,
                y: data["RTD"],
                color:"#000",
            }, true, shift_RTD);
        }

        if(data["SALT"] === null){
            document.getElementById("disconn_SALT").style.opacity = "100%";
        } else {
            document.getElementById("disconn_SALT").style.opacity = "0%";
            chart_SALT.series[0].addPoint({
                x: date,
                y: data["SALT"],
                color:"#000",
            }, true, shift_SALT);
        }

        if(data["DO"] === null){
            document.getElementById("disconn_DO").style.opacity = "100%";
        } else {
            document.getElementById("disconn_DO").style.opacity = "0%";
            chart_DO.series[0].addPoint({
                x: date,
                y: data["DO"],
                color:"#000",
            }, true, shift_DO);
        }
        
    })
</script>
    



</body>
</html>